# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1trbuaUr7mmFk-GAMQBkOy2brj0LGDHnH
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import requests
from datetime import datetime
import matplotlib.pyplot as plt

st.set_page_config(page_title="Rain Prediction App 🌦️", layout="wide")

# Custom style
st.markdown("""
    <style>
        .main {background-color: #f5f7fa;}
        .big-font {font-size:24px !important;}
        .card {
            background-color: #e6f2ff;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
    </style>
""", unsafe_allow_html=True)

# App title
st.markdown("<h1 style='text-align: center;'>🌧️ Live Weather Forecast & Rain Prediction</h1>", unsafe_allow_html=True)

# API Key & City Input
API_KEY = "0a4819b28a82fa77e5437c6c156837d4"
city = st.text_input("Enter your city name 🌍", "Chennai")

# Button to fetch weather
if st.button("🔎 Get Weather Forecast"):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        forecast_data = []

        for item in data["list"]:
            forecast = {
                "datetime": datetime.fromtimestamp(item["dt"]),
                "temperature": item["main"]["temp"],
                "humidity": item["main"]["humidity"],
                "wind_speed": item["wind"]["speed"],
                "weather": item["weather"][0]["description"]
            }
            forecast_data.append(forecast)

        df = pd.DataFrame(forecast_data)

        # Plot: Temperature
        st.markdown("### 🌡️ Temperature Trend")
        plt.figure(figsize=(10, 4))
        plt.plot(df["datetime"], df["temperature"], marker='o', color='blue')
        plt.xticks(rotation=45)
        plt.xlabel("Date Time")
        plt.ylabel("Temperature (°C)")
        plt.tight_layout()
        st.pyplot(plt)

        # Plot: Humidity
        st.markdown("### 💧 Humidity Trend")
        plt.figure(figsize=(10, 4))
        plt.plot(df["datetime"], df["humidity"], marker='s', color='green')
        plt.xticks(rotation=45)
        plt.xlabel("Date Time")
        plt.ylabel("Humidity (%)")
        plt.tight_layout()
        st.pyplot(plt)

        # Plot: Wind Speed
        st.markdown("### 🌬️ Wind Speed Trend")
        plt.figure(figsize=(10, 4))
        plt.plot(df["datetime"], df["wind_speed"], marker='^', color='red')
        plt.xticks(rotation=45)
        plt.xlabel("Date Time")
        plt.ylabel("Wind Speed (m/s)")
        plt.tight_layout()
        st.pyplot(plt)

        # Rain Prediction Display
        st.markdown("### ☔ Rain Prediction")
        df['Rain_Predicted'] = df['weather'].str.contains("rain", case=False)

        for i in range(0, len(df), 3):  # show every 3-hour block
            sub_df = df.iloc[i]
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown(f"<div class='card'><b>{sub_df['datetime'].strftime('%a %I:%M %p')}</b></div>", unsafe_allow_html=True)
            with col2:
                st.markdown(f"<div class='card'>Weather: <b>{sub_df['weather'].capitalize()}</b></div>", unsafe_allow_html=True)
            with col3:
                rain_status = "🌧️ Rain Expected" if sub_df['Rain_Predicted'] else "🌤️ No Rain"
                st.markdown(f"<div class='card'><b>{rain_status}</b></div>", unsafe_allow_html=True)

    else:
        st.error("Failed to fetch data. Please check the city name or API key.")