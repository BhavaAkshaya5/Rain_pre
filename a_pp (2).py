# -*- coding: utf-8 -*-
"""a_pp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YSE4ADaA9_WjtShhhIDkDB6i-oWSX6WO
"""

import streamlit as st
import requests
from datetime import datetime

# Page setup
st.set_page_config(page_title="Rain Check ☔", layout="centered")

st.markdown("## ☁️🌦️ **Current Rain Forecast via Voice Input** ⛅🌧️")

# Use audio input widget
audio_input = st.audio_input("🎙️ Speak or type your city name:")

city = None

# If user types, take text; else, if audio provided, attempt to transcribe
if "http" in str(audio_input):
    st.write("✅ Audio captured. Sending for transcription...")

# For simplicity, simulate speech-to-text using openAI Whisper endpoint if available
if audio_input:
    # Optionally send to a STT service here and get `city = transcribed_text`
    st.write("ℹ️ Transcription not implemented—please type manually instead.")
    st.text_input("Or type your city:", "")

else:
    city = st.text_input("🌍 Or just type your city:", "Chennai")

if city and st.button("🔍 Check Weather Now"):
    # (your existing weather code here)
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid=YOUR_API_KEY&units=metric"
    # ...

# Reinstall streamlit just before importing to ensure it's available in this environment

import streamlit as st
import openai  # or any LLM SDK you prefer

# — PAGE CONFIG —
st.set_page_config("Chatbot Assistant", layout="wide")
st.title("🤖 Chatbot Assistant")

# — API KEY —
# Removed st.secrets.get() as it's not applicable in this notebook context
openai.api_key = st.text_input("Enter your OpenAI API Key:", type="password")

# — Initialize Session State —
if "messages" not in st.session_state:
    st.session_state.messages = []

# — Display chat history —
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# — Chat input —
# Check if the API key has been entered before allowing chat input
if openai.api_key and (user_input := st.chat_input("Send a message")):
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("assistant"):
        placeholder = st.empty()
        response_content = ""

        # Stream response from LLM
        for chunk in openai.ChatCompletion.create(
                model="gpt-3.5-turbo", messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    *st.session_state.messages
                ], stream=True
            ):
            chunk_msg = chunk.choices[0].delta.get("content", "")
            response_content += chunk_msg
            placeholder.markdown(response_content)

        st.session_state.messages.append({"role": "assistant", "content": response_content})
elif not openai.api_key:
    st.warning("Please enter your OpenAI API Key to start chatting.")

import streamlit as st
from openai import OpenAI

st.set_page_config("ChatBot", layout="wide")
st.title("🤖 Chat with GPT")

# Use text input to get the API key instead of st.secrets
# This is more suitable for notebook environments
api_key = st.text_input("Enter your OpenAI API Key:", type="password")

client = None # Initialize client to None

# Only create the OpenAI client if the API key is provided
if api_key:
    client = OpenAI(api_key=api_key)

if "msgs" not in st.session_state:
    st.session_state.msgs = [
        {"role": "system", "content": "You are a helpful assistant."}
    ]

for msg in st.session_state.msgs:
    with st.chat_message(msg["role"]):
        st.write(msg["content"])

# Only allow chat input if the client is successfully initialized (i.e., API key is provided)
if client and (user_input := st.chat_input("Your message")):
    st.session_state.msgs.append({"role": "user", "content": user_input})
    with st.chat_message("assistant"):
        reply_txt = ""
        # Use the client to get the chat completion
        for chunk in client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=st.session_state.msgs,
            stream=True,
        ):
            delta = chunk.choices[0].delta.content
            if delta:
                reply_txt += delta
                st.write(reply_txt, end="")
        st.session_state.msgs.append({"role": "assistant", "content": reply_txt})
elif not api_key:
    # Provide a warning if the API key is missing
    st.warning("Please enter your OpenAI API Key to start chatting.")
